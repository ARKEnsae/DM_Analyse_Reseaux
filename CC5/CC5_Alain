{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ER graphs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1-Generate 10 replicas of ER graphs with N=1000 nodes and connection probabilities p=[0.00005, 0.0001, 0.0002, 0.001, 0.002,0.005, 0.01,0.015, 0.02]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2- show visually and with a linear fit that $\\langle k\\rangle=Np$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3- Are the networks connected? Which is the size of the giant component?  Plot size of the giant component as a function of p. What do you observe?  \n",
    "Pour chaque valeur de $p$ on regarde la taille moyenne de la composante maximale.   \n",
    "https://stackoverflow.com/questions/26105764/how-do-i-get-the-giant-component-of-a-networkx-graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import networkx as nx\n",
    "import random\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import itertools\n",
    "\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "N=1000\n",
    "nRepl=10\n",
    "pList=[0.00005, 0.0001, 0.0002, 0.001, 0.002,0.005, 0.01,0.015, 0.02]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5e-05\n",
      "0.0001\n",
      "0.0002\n",
      "0.001\n",
      "0.002\n",
      "0.005\n",
      "0.01\n",
      "0.015\n",
      "0.02\n"
     ]
    }
   ],
   "source": [
    "# the list of graphs is now a dictionary: I will have a list for each value of the parameter p\n",
    "listGraphs={}\n",
    "\n",
    "#loop on the values for the parameter p\n",
    "for p in pList:\n",
    "    print (p) #to be sure that I'm not too slow\n",
    "    listGraphs[p]=[]\n",
    "    #loop on the replicas\n",
    "    for i in range(nRepl):\n",
    "        G=nx.erdos_renyi_graph(N,p)\n",
    "        listGraphs[p].append(G)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "avL=[np.mean([G.number_of_edges() for G in listGraphs[p]]) for p in pList]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(pList,avL,'o')\n",
    "\n",
    "plt.xlabel('p')\n",
    "plt.ylabel(r'$\\langle E\\rangle$')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On fait d'abord une régression linéaire"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Y = 498196.03 X + 1.56'"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coef = np.polyfit(pList,avL, 1)\n",
    "poly1d_fn = np.poly1d(coef)\n",
    "lin_fit = \"Y = {} X + {}\".format(round(coef[0],2),\n",
    "                             round(coef[1],2))\n",
    "lin_fit"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Il serait peut-être plus pertinent de faire une régression linéaire sans constante : pour $p=0$ le degré moyen est nul. Par ailleurs, si l'on regarde la p-value, la constante n'est pas significativement différente de 0 au seuil de 5 %. Cela ne change donc quasiment pas d'enlever la constante."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/alainquartierlatente/opt/anaconda3/lib/python3.7/site-packages/scipy/stats/stats.py:1604: UserWarning: kurtosistest only valid for n>=20 ... continuing anyway, n=9\n",
      "  \"anyway, n=%i\" % int(n))\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>            <td>x</td>        <th>  R-squared:         </th> <td>   1.000</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   1.000</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>1.502e+06</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Wed, 10 Mar 2021</td> <th>  Prob (F-statistic):</th> <td>6.36e-20</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>10:44:23</td>     <th>  Log-Likelihood:    </th> <td>  87.152</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>     9</td>      <th>  AIC:               </th> <td>  -170.3</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>     7</td>      <th>  BIC:               </th> <td>  -169.9</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td>-3.104e-06</td> <td> 7.48e-06</td> <td>   -0.415</td> <td> 0.690</td> <td>-2.08e-05</td> <td> 1.46e-05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>y</th>         <td> 2.007e-06</td> <td> 1.64e-09</td> <td> 1225.540</td> <td> 0.000</td> <td>    2e-06</td> <td> 2.01e-06</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 1.304</td> <th>  Durbin-Watson:     </th> <td>   1.981</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.521</td> <th>  Jarque-Bera (JB):  </th> <td>   0.374</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.493</td> <th>  Prob(JB):          </th> <td>   0.830</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 2.845</td> <th>  Cond. No.          </th> <td>5.99e+03</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 5.99e+03. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                      x   R-squared:                       1.000\n",
       "Model:                            OLS   Adj. R-squared:                  1.000\n",
       "Method:                 Least Squares   F-statistic:                 1.502e+06\n",
       "Date:                Wed, 10 Mar 2021   Prob (F-statistic):           6.36e-20\n",
       "Time:                        10:44:23   Log-Likelihood:                 87.152\n",
       "No. Observations:                   9   AIC:                            -170.3\n",
       "Df Residuals:                       7   BIC:                            -169.9\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept  -3.104e-06   7.48e-06     -0.415      0.690   -2.08e-05    1.46e-05\n",
       "y           2.007e-06   1.64e-09   1225.540      0.000       2e-06    2.01e-06\n",
       "==============================================================================\n",
       "Omnibus:                        1.304   Durbin-Watson:                   1.981\n",
       "Prob(Omnibus):                  0.521   Jarque-Bera (JB):                0.374\n",
       "Skew:                          -0.493   Prob(JB):                        0.830\n",
       "Kurtosis:                       2.845   Cond. No.                     5.99e+03\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 5.99e+03. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import statsmodels.formula.api as smf\n",
    "df = pd.DataFrame(\n",
    "    {\"x\":pList,\n",
    "    \"y\":avL})\n",
    "\n",
    "results = smf.ols('x ~ y', data=df).fit()\n",
    "results.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "from scipy.optimize import curve_fit\n",
    "def f(x, a):\n",
    "    return a * x\n",
    "\n",
    "# parameters and parameter covariances\n",
    "popt, pcov = curve_fit(f, pList, avL)\n",
    "popt\n",
    "lin_fit_without_c = \"Y = {} X\".format(round(popt[0],2))\n",
    "lin_fit_without_c\n",
    "poly1d_fn = np.poly1d([popt[0],0]) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2.48254206e+11, 1.56019466e+00])"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "poly1d_fn([popt[0],0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "poly1d_fn(pList)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(pList,avL,'o')\n",
    "plt.plot(pList, poly1d_fn(pList), '--k',label = lin_fit_without_c)\n",
    "\n",
    "plt.xlabel('p')\n",
    "plt.ylabel(r'$\\langle E\\rangle$')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{5e-05: [False, False, False, False, False, False, False, False, False, False],\n",
       " 0.0001: [False,\n",
       "  False,\n",
       "  False,\n",
       "  False,\n",
       "  False,\n",
       "  False,\n",
       "  False,\n",
       "  False,\n",
       "  False,\n",
       "  False],\n",
       " 0.0002: [False,\n",
       "  False,\n",
       "  False,\n",
       "  False,\n",
       "  False,\n",
       "  False,\n",
       "  False,\n",
       "  False,\n",
       "  False,\n",
       "  False],\n",
       " 0.001: [False, False, False, False, False, False, False, False, False, False],\n",
       " 0.002: [False, False, False, False, False, False, False, False, False, False],\n",
       " 0.005: [False, False, False, False, False, False, False, False, False, False],\n",
       " 0.01: [True, True, True, True, True, True, True, True, True, True],\n",
       " 0.015: [True, True, True, True, True, True, True, True, True, True],\n",
       " 0.02: [True, True, True, True, True, True, True, True, True, True]}"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "{k:[nx.is_connected(g) for g in listGraphs[k]] for k in listGraphs.keys()}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<networkx.classes.graph.Graph at 0x7fb328b687d0>"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "G = listGraphs[0.01][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'Graph' object has no attribute 'len'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-56-07be779995ae>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mGcc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msorted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconnected_components\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mG\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreverse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mG0\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mG\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubgraph\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mGcc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mG0\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m: 'Graph' object has no attribute 'len'"
     ]
    }
   ],
   "source": [
    "Gcc = sorted(nx.connected_components(G), key=len, reverse=True)\n",
    "G0 = G.subgraph(Gcc[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# COMPARISON WITH REAL NETWORKS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1- Take the twitch networks from last lesson. Calculate their average clustering coefficient. Calculate the average clustering coefficient for several replicas of a random graph with the same number of nodes and the same number of edges (using p=2E/N(N-1) ) of the twich networks. Compare the real values and the random values. What do you observe? How can you interpret this?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "OPTIONAL: perform a significance test to see if the value observed in real networks is equal to the value observed in the random case. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2- OPTIONAL: A better way to randomize network structures consists in rewiring the links preserving the degree structure:\n",
    "\n",
    "(1) take two links (n1,n2) and (n3,n4). \n",
    "\n",
    "(2)exchange one of the extremes in order to have (n1,n4) and (n3,n2)\n",
    "\n",
    "(3) Iterate this procedure for a number of times proportional to the number of edges\n",
    "\n",
    "Write the script performing this procedure and apply this to one of the Twitch networks. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
